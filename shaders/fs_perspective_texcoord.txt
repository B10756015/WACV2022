#version 130

varying vec3 N;
varying vec3 v;  
varying vec4 p;  //original position in object space
varying vec4 texcoord;

//correspond to opengl bind textures:
uniform sampler2D texture_main;

uniform int draw_texture;  //draw the "picture" texture or not?

uniform float alpha;  //0~1 alpha value

#define PI 3.14159265358979323846264338

void main (void)  
{  
   vec3 L = normalize(gl_LightSource[0].position.xyz - v);   
   vec3 E = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0)  
   vec3 R = normalize(-reflect(L,N));  
 
   //calculate Ambient Term:  
   vec4 Iamb = gl_FrontLightProduct[0].ambient;    

   //calculate Diffuse Term: 
   vec4 Idiff = gl_FrontLightProduct[0].diffuse * max(dot(N,L), 0.0);
      
   // calculate Specular Term:
   vec4 Ispec = gl_FrontLightProduct[0].specular 
                * pow(max(dot(R,E),0.0), gl_FrontMaterial.shininess);

   // write Total Color:  
   gl_FragColor = gl_FrontLightModelProduct.sceneColor + Iamb + Idiff + Ispec;   

   if(draw_texture == 1)
   {
        gl_FragColor = vec4(texture(texture_main, texcoord.xy).xyz, alpha);
        
        //gl_FragColor.x = gl_FragColor.x * 0.001 + length(vec3(p.x,p.y, p.z)) * 0.5;

        //gl_FragColor = vec4(length(vec3(p.x,p.y,p.z))*0.5,0,0,1);
    }
}